msgid ""
msgstr ""
"Project-Id-Version: roadiz-cms-documentation\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-08-05 11:31+0200\n"
"PO-Revision-Date: 2022-08-05 10:32\n"
"Last-Translator: \n"
"Language-Team: French\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"
"X-Crowdin-Project: roadiz-cms-documentation\n"
"X-Crowdin-Project-ID: 421742\n"
"X-Crowdin-Language: fr\n"
"X-Crowdin-File: /develop/i18n/locale/extension/extending_roadiz.pot\n"
"X-Crowdin-File-ID: 144\n"
"Language: fr_FR\n"

#: ../../src/extension/extending_roadiz.rst:5
msgid "Extending Roadiz"
msgstr ""

#: ../../src/extension/extending_roadiz.rst:8
msgid "Add back-office entry"
msgstr ""

#: ../../src/extension/extending_roadiz.rst:10
msgid "At first, create a controller into your theme folder, for example ``src/Controller/Admin/AdminController``."
msgstr ""

#: ../../src/extension/extending_roadiz.rst:12
msgid "Example:"
msgstr ""

#: ../../src/extension/extending_roadiz.rst:33
msgid "If you look at this example you can see the class extends ``RozierApp`` class. This will enable you to “inject” your code into Rozier Back-stage DOM and Style."
msgstr ""

#: ../../src/extension/extending_roadiz.rst:36
msgid "Now let's have a look to your twig template file ``templates/admin/test.html.twig``."
msgstr ""

#: ../../src/extension/extending_roadiz.rst:66
msgid "The first line is for inheriting from Rozier base template, you can notice that we explicitly choose `@Rozier` namespace."
msgstr ""

#: ../../src/extension/extending_roadiz.rst:68
msgid "The two next blocks are made for you to add some CSS or Javascript. For CSS, the block ``customStyle`` can be use to link an external file with a ``<link>`` tag, the path must be something like that ``{{ asset('static/css/customstyle.css', 'MyTheme') }}``, or add directly some CSS with \"<style>\" tag. For JS, the block ``customScripts`` work as is, just link an external JS file or write your ``<script>`` tag."
msgstr ""

#: ../../src/extension/extending_roadiz.rst:74
msgid "Then create your own content, do not hesitate to give a look at Rozier back-stage theme Twig files to use the right DOM structure. For simple features, you wouldn’t have to extend JS nor CSS if you follow the same HTML coding style."
msgstr ""

#: ../../src/extension/extending_roadiz.rst:78
msgid "Linking things together"
msgstr ""

#: ../../src/extension/extending_roadiz.rst:80
msgid "Add the route in the theme ``config/routes.yaml`` file."
msgstr ""

#: ../../src/extension/extending_roadiz.rst:82
msgid "In this case the route will be:"
msgstr ""

#: ../../src/extension/extending_roadiz.rst:93
msgid "Inject your own entries in back-stage"
msgstr ""

#: ../../src/extension/extending_roadiz.rst:95
msgid "The last thing to do is to add your new admin entry in the back-office menu."
msgstr ""

#: ../../src/extension/extending_roadiz.rst:97
msgid "Go to your ``config/packages/roadiz_rozier.yaml`` and add your own ``entries``:"
msgstr ""

#: ../../src/extension/extending_roadiz.rst:110
msgid "If you want to have a category and sub-entries, just change the path at ``null`` value and create your ``subentries`` array as described in the next example:"
msgstr ""

#: ../../src/extension/extending_roadiz.rst:130
msgid "You can restrict buttons to users with specific roles. Just replace ``roles: ~`` with ``roles: [ 'ROLE_ACCESS_NODES' ]``. You can even create your own roles to take full power of Roadiz extension system."
msgstr ""

#: ../../src/extension/extending_roadiz.rst:135
msgid "Adding roles in ``roadiz_rozier.entries`` service will only restrict buttons display in Rozier backstage interface. To really protect your controllers from unwanted users add ``$this->validateAccessForRole('ROLE_ACCESS_MY_FEATURE');`` at the first line of your back-ofice controller‘s actions. This will kick non-granted users from your custom back-office parts. Give a look at Rozier theme controllers to see how we use it."
msgstr ""

