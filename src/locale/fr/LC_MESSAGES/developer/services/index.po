# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015, Ambroise Maupate & Julien Blanchet
# This file is distributed under the same license as the Roadiz
# documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Roadiz documentation 0.14.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-09-21 11:54+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../src/developer/services/index.rst:4
msgid "Services"
msgstr ""

#: ../../src/developer/services/index.rst:6
msgid ""
"Roadiz is built upon `Pimple <http://pimple.sensiolabs.org>`_ dependency "
"injection container. Thanks to this architecture, all Core and Backoffice"
" services are available from any controller in your themes."
msgstr ""

#: ../../src/developer/services/index.rst:15
msgid "Doctrine entity manager: ``$this->get('em')``"
msgstr ""

#: ../../src/developer/services/index.rst:16
msgid "Twig rendering environment: ``$this->get('twig.environment')``"
msgstr ""

#: ../../src/developer/services/index.rst:17
msgid "Translator: ``$this->get('translator')``"
msgstr ""

#: ../../src/developer/services/index.rst:18
msgid "Url matcher: ``$this->get('urlMatcher')``"
msgstr ""

#: ../../src/developer/services/index.rst:19
msgid "Url generator: ``$this->get('urlGenerator')``"
msgstr ""

#: ../../src/developer/services/index.rst:20
msgid "Authorization checker: ``$this->get('securityAuthorizationChecker')``"
msgstr ""

#: ../../src/developer/services/index.rst:21
msgid "User token storage: ``$this->get('securityTokenStorage')``"
msgstr ""

#: ../../src/developer/services/index.rst:22
msgid "Firewall: ``$this->get('firewall')``"
msgstr ""

#: ../../src/developer/services/index.rst:23
msgid "Assets packages: ``$this->get('assetPackages')``"
msgstr ""

#: ../../src/developer/services/index.rst:24
msgid "Email manager: ``$this->get('emailManager')``"
msgstr ""

#: ../../src/developer/services/index.rst:25
msgid "Contact form manager: ``$this->get('contactFormManager')``"
msgstr ""

#: ../../src/developer/services/index.rst:26
msgid "Accessing global settings *ParameterBag*: ``$this->get('settingsBag')``"
msgstr ""

#: ../../src/developer/services/index.rst:27
msgid "Accessing global node-types *ParameterBag*: ``$this->get('nodeTypesBag')``"
msgstr ""

#: ../../src/developer/services/index.rst:28
msgid ""
"Getting an entity handler: "
"``$this->get('factory.handler')->getHandler($myEntity)``"
msgstr ""

#: ../../src/developer/services/index.rst:29
msgid "…"
msgstr ""

#: ../../src/developer/services/index.rst:32
msgid "Entity APIs"
msgstr ""

#: ../../src/developer/services/index.rst:34
msgid ""
"All these services are Doctrine repository wrappers meant to ease "
"querying entities inside your themes and according to "
"``AuthorizationChecker``. This will implicitely check if nodes or node-"
"sources are published when you request them without bothering to insert "
"the right criteria in your *findBy* calls."
msgstr ""

#: ../../src/developer/services/index.rst:39
msgid ""
"Each of these implements ``AbstractApi`` methods ``getBy`` and "
"``getOneBy``"
msgstr ""

#: ../../src/developer/services/index.rst:41
msgid "`nodeApi <http://api.roadiz.io/RZ/Roadiz/CMS/Utils/NodeApi.html>`_"
msgstr ""

#: ../../src/developer/services/index.rst:42
msgid "`nodeTypeApi <http://api.roadiz.io/RZ/Roadiz/CMS/Utils/NodeTypeApi.html>`_"
msgstr ""

#: ../../src/developer/services/index.rst:43
msgid ""
"`nodeSourceApi "
"<http://api.roadiz.io/RZ/Roadiz/CMS/Utils/NodeSourceApi.html>`_"
msgstr ""

#: ../../src/developer/services/index.rst:44
msgid "`tagApi <http://api.roadiz.io/RZ/Roadiz/CMS/Utils/TagApi.html>`_"
msgstr ""

#: ../../src/developer/services/index.rst:47
msgid "Using Solr API"
msgstr ""

#: ../../src/developer/services/index.rst:49
msgid ""
"Solr is a really powerful tool to search over your node database with a "
"clever plain-text search engine and the ability to highlight your "
"criteria in the search results. Before going further, make sure that a "
"Solr server is available and that it is well configured in your "
"``config.yml``. You can use the ``bin/roadiz solr:check`` command to "
"verify and then ``bin/roadiz solr:reindex`` command to force "
"synchronizing your node database with Solr index."
msgstr ""

#: ../../src/developer/services/index.rst:56
msgid ""
"You can use the ``solr.search.nodeSource`` service and its two methods to"
" get node-sources from a search query."
msgstr ""

#: ../../src/developer/services/index.rst:60
msgid "Simple search results"
msgstr ""

#: ../../src/developer/services/index.rst:62
msgid ""
"``$this->get('solr.search.nodeSource')->search()`` method will return a "
"``SolrSearchResults`` *traversable* object listing ``NodesSources``:"
msgstr ""

#: ../../src/developer/services/index.rst:85
msgid "Search results with highlighting"
msgstr ""

#: ../../src/developer/services/index.rst:87
msgid ""
"``$this->get('solr.search.nodeSource')->searchWithHighlight()`` method "
"will return a ``SolrSearchResults`` *traversable* object with arrays with"
" a simple structure: ``nodeSource`` for the NodesSources object and "
"``highlighting`` for the *html* data with highlighted text wrapped in "
"``span.solr-highlight`` html tag."
msgstr ""

#: ../../src/developer/services/index.rst:114
msgid "Count search results"
msgstr ""

#: ../../src/developer/services/index.rst:116
msgid ""
"``$this->get('solr.search.nodeSource')->search()`` and "
"``$this->get('solr.search.nodeSource')->searchWithHighlight()``methods "
"will return a ``SolrSearchResults`` *traversable* object. You can use "
"``SolrSearchResults::getResultCount()`` to get results count."
msgstr ""

#: ../../src/developer/services/index.rst:139
msgid "Search criteria"
msgstr ""

#: ../../src/developer/services/index.rst:141
msgid ""
"Solr will search in *NodesSources* index by default, but it will not "
"filter by translation, type or visibility. You can add your own search "
"criteria using similar filter names as ``nodeSourceApi``."
msgstr ""

#: ../../src/developer/services/index.rst:144
msgid "``visible``: boolean"
msgstr ""

#: ../../src/developer/services/index.rst:145
msgid "``translation``: a ``Translation`` object"
msgstr ""

#: ../../src/developer/services/index.rst:146
msgid "``_locale``: string"
msgstr ""

#: ../../src/developer/services/index.rst:147
msgid "``tags``: a ``Tag`` object or ``Tag`` array"
msgstr ""

#: ../../src/developer/services/index.rst:148
msgid "``nodeType``: a ``NodeType`` object"
msgstr ""

#: ../../src/developer/services/index.rst:149
msgid "``status``: defaults to ``Node::PUBLISHED``"
msgstr ""

#: ../../src/developer/services/index.rst:150
msgid ""
"``publishedAt``: ``\\DateTime`` or array like "
"``EntityRepository::findBy`` method."
msgstr ""

#~ msgid "Search results with hightlighting"
#~ msgstr ""

# ada16d11034b4b768e4a00ee0facd07e
#~ msgid "Doctrine entity manager: ``$this->getService('em')``"
#~ msgstr ""

# db44c4baedcd411fb55c2b852fca92df
#~ msgid "Twig rendering environment: ``$this->getService('twig.environment')``"
#~ msgstr ""

# 19ae332e0a8b465fac14d1e044437a91
#~ msgid "Translator: ``$this->getService('translator')``"
#~ msgstr ""

# 78575fca641b4ad38a01ee77578550a0
#~ msgid "Url matcher: ``$this->getService('urlMatcher')``"
#~ msgstr ""

# a13a54f9928a4ad480285315f6a100cc
#~ msgid "Url generator: ``$this->getService('urlGenerator')``"
#~ msgstr ""

# 74807c2417644187a31a606b258c519c
#~ msgid ""
#~ "Authorization checker: "
#~ "``$this->getService('securityAuthorizationChecker')``"
#~ msgstr ""

# 9f5ce3f89ec34c6882e3c83f9239e934
#~ msgid "User token storage: ``$this->getService('securityTokenStorage')``"
#~ msgstr ""

# 608598fe268843b387afe83ab905bef7
#~ msgid "Firewall: ``$this->getService('firewall')``"
#~ msgstr ""

# 75d11325aee84dc89391a04eb295cccc
#~ msgid ""
#~ "``$this->getService('solr.search.nodeSource')->search()`` method"
#~ " will return an array of "
#~ "``NodesSources``"
#~ msgstr ""

# c7c97588d1b5479ba25654fb07e5e8a5
#~ msgid ""
#~ "``$this->getService('solr.search.nodeSource')->searchWithHighlight()``"
#~ " method will return an array of "
#~ "array with a simple structure: "
#~ "``nodeSource`` for the NodesSources object "
#~ "and ``highlighting`` for the *html* data"
#~ " with highlighted text wrapped in "
#~ "``span.solr-highlight`` html tag."
#~ msgstr ""

#~ msgid "Accessing global settings: ``$this->get('settingsBag')``"
#~ msgstr ""

#~ msgid "Accessing global node-types: ``$this->get('nodeTypesBag')``"
#~ msgstr ""

#~ msgid ""
#~ "``$this->get('solr.search.nodeSource')->search()`` method "
#~ "will return an array of ``NodesSources``"
#~ msgstr ""

#~ msgid ""
#~ "``$this->get('solr.search.nodeSource')->searchWithHighlight()`` "
#~ "method will return an array of "
#~ "array with a simple structure: "
#~ "``nodeSource`` for the NodesSources object "
#~ "and ``highlighting`` for the *html* data"
#~ " with highlighted text wrapped in "
#~ "``span.solr-highlight`` html tag."
#~ msgstr ""

