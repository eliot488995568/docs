# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015, Ambroise Maupate & Julien Blanchet
# This file is distributed under the same license as the Roadiz
# documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Roadiz documentation 0.14.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-11-28 13:17+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.1\n"

#: ../../developer/first-steps/manual_config.rst:4
msgid "Manual configuration"
msgstr ""

#: ../../developer/first-steps/manual_config.rst:6
msgid ""
"This section explains how main configuration file ``app/conf/config.yml``"
" works. It is way more more convenient than launching Install theme for "
"each configuration update."
msgstr ""

#: ../../developer/first-steps/manual_config.rst:9
msgid ""
"Your ``app/conf/config.yml`` file is built using YAML syntax. Each part "
"matches a Roadiz *service* configuration."
msgstr ""

#: ../../developer/first-steps/manual_config.rst:12
msgid ""
"By default, every Roadiz environment read ``app/conf/config.yml`` "
"configuration file. But you can specify different files for ``dev`` and "
"``test`` environments. Just create a ``app/conf/config_dev.yml`` or "
"``app/conf/config_test.yml`` file to override default parameters. You "
"will be able to use a different database, mailer or *Solr* instance not "
"to pollute your production environment."
msgstr ""

#: ../../developer/first-steps/manual_config.rst:18
msgid "*Roadiz Source edition* stores configuration files in ``conf/`` folder."
msgstr ""

#: ../../developer/first-steps/manual_config.rst:21
msgid "Doctrine"
msgstr ""

#: ../../developer/first-steps/manual_config.rst:23
msgid ""
"The most important configuration section deals with database connection "
"which is handled by *Doctrine*:"
msgstr ""

#: ../../developer/first-steps/manual_config.rst:34
msgid ""
"Roadiz uses *Doctrine ORM* to store your data. It will directly pass this"
" YAML configuration to *Doctrine* so you can use every available drivers "
"and options from its documentation at http://doctrine-"
"dbal.readthedocs.org/en/latest/reference/configuration.html"
msgstr ""

#: ../../developer/first-steps/manual_config.rst:39
msgid "Cache drivers"
msgstr ""

#: ../../developer/first-steps/manual_config.rst:41
msgid ""
"When set as *null*, cache drivers will be automatically chosen by Roadiz "
"according to your PHP setup and available extensions."
msgstr ""

#: ../../developer/first-steps/manual_config.rst:44
msgid ""
"Sometimes, if a cache extension is available but you don’t want to use "
"it, you’ll have to specify a cache driver type (use ``array`` to disable "
"caches). This is a known case when using *OVH* shared hosting plans which"
" provide *memcached* PHP extension but does not let you log in."
msgstr ""

#: ../../developer/first-steps/manual_config.rst:55
msgid "Available cache types are:"
msgstr ""

#: ../../developer/first-steps/manual_config.rst:57
msgid "*apc*"
msgstr ""

#: ../../developer/first-steps/manual_config.rst:58
msgid "*xcache*"
msgstr ""

#: ../../developer/first-steps/manual_config.rst:59
msgid "*memcache* (requires ``host`` and ``port`` configuration)"
msgstr ""

#: ../../developer/first-steps/manual_config.rst:60
msgid "*memcached* (requires ``host`` and ``port`` configuration)"
msgstr ""

#: ../../developer/first-steps/manual_config.rst:61
msgid "*redis* (requires ``host`` and ``port`` configuration)"
msgstr ""

#: ../../developer/first-steps/manual_config.rst:62
msgid "*array*"
msgstr ""

#: ../../developer/first-steps/manual_config.rst:67
msgid "Monolog handlers"
msgstr ""

#: ../../developer/first-steps/manual_config.rst:69
msgid ""
"By default, Roadiz writes its logs to ``app/logs/`` folder in a file "
"named after your running environment (eg. ``roadiz_prod.log``). But you "
"can also customize *Monolog* to use three different handlers. Pay "
"attention that using custom log handlers will disable default Roadiz "
"logging (except for *Doctrine* one) so it could be better to always use "
"*default* handler along a custom one."
msgstr ""

#: ../../developer/first-steps/manual_config.rst:74
msgid "Available handler types:"
msgstr ""

#: ../../developer/first-steps/manual_config.rst:76
msgid ""
"``default``: Reproduce the Roadiz default handler which writes to "
"``app/logs/`` folder in a file named after your running environment"
msgstr ""

#: ../../developer/first-steps/manual_config.rst:77
msgid ""
"``stream``: Defines a log file stream on your local system. **Your path "
"must be writable!**"
msgstr ""

#: ../../developer/first-steps/manual_config.rst:78
msgid "``syslog``: Writes to system *syslog*."
msgstr ""

#: ../../developer/first-steps/manual_config.rst:79
msgid ""
"``gelf``: Send GELF formatted messages to an external entry point defined"
" by *url* value. Roadiz uses a fault tolerant handler which **won’t "
"trigger any error** if your path is not reachable, so make sure it’s "
"correct. It’s a good idea to combine a *gelf* handler with a local "
"logging system if your external entry point is down."
msgstr ""

#: ../../developer/first-steps/manual_config.rst:81
msgid "``type`` and ``level`` values are mandatory for each handlers."
msgstr ""

#: ../../developer/first-steps/manual_config.rst:83
msgid "Here is an example configuration:"
msgstr ""

#: ../../developer/first-steps/manual_config.rst:112
msgid "Solr endpoint"
msgstr ""

#: ../../developer/first-steps/manual_config.rst:114
msgid ""
"Roadiz can use an *Apache Solr* search-engine to index nodes-sources. Add"
" this to your `config.yml` to link your CMS to your *Solr* server:"
msgstr ""

#: ../../developer/first-steps/manual_config.rst:130
msgid ""
"Roadiz CLI command can easily handle Solr index. Just type ``./bin/roadiz"
" solr:check`` to get more informations."
msgstr ""

#: ../../developer/first-steps/manual_config.rst:135
msgid "Entities paths"
msgstr ""

#: ../../developer/first-steps/manual_config.rst:137
msgid ""
"Roadiz uses *Doctrine* to map object entities to database tables. In "
"order to make Roadiz more extensible, you can add your own paths to the "
"``entities`` part."
msgstr ""

#: ../../developer/first-steps/manual_config.rst:149
msgid "Configure mailer"
msgstr ""

#: ../../developer/first-steps/manual_config.rst:151
msgid ""
"Roadiz uses *Swift Mailer* to send emails. This awesome library is built "
"to enable different kinds of mail transports and protocols. By default, "
"Roadiz uses your PHP ``sendmail`` configuration but you can tell it to "
"use another transport (such as an external SMTP server) in your "
"``app/conf/config.yml`` file."
msgstr ""

#: ../../developer/first-steps/manual_config.rst:155
msgid "You can use *SSL*, *TLS* or no encryption at all."
msgstr ""

#: ../../developer/first-steps/manual_config.rst:168
msgid ""
"Pay attention that many external SMTP services (*Mandrill*, *Mailjet*…) "
"only accept email from validated domains. So make sure that your "
"application uses a known ``From:`` email sender not to be blacklisted or "
"blocked by these services. If you need your emails to be replied to an "
"anonymous address, use ``ReplyTo:`` header instead."
msgstr ""

#: ../../developer/first-steps/manual_config.rst:174
msgid "Images processing"
msgstr ""

#: ../../developer/first-steps/manual_config.rst:176
msgid ""
"Roadiz use `Image Intervention <http://image.intervention.io/>`_ library "
"to automatically create a lower quality version of your image if they are"
" too big. You can define this threshold value in the ``assetsProcessing``"
" section. ``driver`` and ``defaultQuality`` will be also use for the on-"
"the-fly image processing with `Intervention Request "
"<https://github.com/ambroisemaupate/intervention-request>`_ library."
msgstr ""

#: ../../developer/first-steps/manual_config.rst:198
msgid "Additionnal *Intervention Request* subscribers"
msgstr ""

#: ../../developer/first-steps/manual_config.rst:200
msgid ""
"Any *Intervention Request* subscriber can be added to configuration with "
"its ``classname`` and its constructor arguments. Here is an example with "
"``WatermarkListener`` which will print some text on all your images."
msgstr ""

#: ../../developer/first-steps/manual_config.rst:217
msgid "Use kraken.io to reduce drastically image sizes"
msgstr ""

#: ../../developer/first-steps/manual_config.rst:219
msgid ""
"Since you can add *Intervention Request* subscribers, we created a useful"
" one that sends every images to `kraken.io <https://kraken.io/>`_ "
"services to shrink them. Once you’ve configured it, do not forget to "
"empty your caches **and** image caches to see changes."
msgstr ""

#: ../../developer/first-steps/manual_config.rst:236
msgid ""
"Take note that each generated image is sent to *kraken.io* servers. It "
"can generate some overhead time on the first time you request an image."
msgstr ""

#: ../../developer/first-steps/manual_config.rst:240
msgid "Console command"
msgstr ""

#: ../../developer/first-steps/manual_config.rst:242
msgid ""
"Roadiz can be executed as a simple CLI tool using your SSH connection. "
"This is useful to handle basic administration tasks with no need of "
"backoffice administration."
msgstr ""

#: ../../developer/first-steps/manual_config.rst:249
msgid ""
"If your system is not configured to have *php* located in "
"``/usr/bin/php`` use it this way:"
msgstr ""

#: ../../developer/first-steps/manual_config.rst:255
msgid ""
"Default command with no arguments will show you the available commands "
"list. Each command has its own parameters. You can use the argument "
"``--help`` to get more informations about each tool:"
msgstr ""

#: ../../developer/first-steps/manual_config.rst:263
msgid ""
"We even made *Doctrine* CLI tools directly available from Roadiz Console."
" Be careful, these are powerful commands which can alter your database "
"and make you lose precious data. Especially when you will need to update "
"your database schema after a Theme or a Core update. **Always make a "
"database back-up before any Doctrine operation**."
msgstr ""

#: ../../developer/first-steps/manual_config.rst:268
msgid "Additional commands"
msgstr ""

#: ../../developer/first-steps/manual_config.rst:270
msgid ""
"If you are developing your own theme, you might need to create some "
"custom CLI commands. Roadiz can handle additional commands if you add "
"them in your ``app/conf/config.yml`` as you would do for any additional "
"*entities*. Make sure that every additional commands extend "
"``Symfony\\Component\\Console\\Command\\Command`` class."
msgstr ""

# 7e74524aec3a4cb49f1b8913db902175
#~ msgid ""
#~ "This section explains how main "
#~ "configuration file ``conf/config.yml`` works. "
#~ "It is way more more convenient "
#~ "than launching Install theme for each"
#~ " configuration update."
#~ msgstr ""

# 3b1047ce7aff4e5bad0f45b761cbde46
#~ msgid ""
#~ "Your ``conf/config.yml`` file is built "
#~ "using YAML syntax. Each part matches "
#~ "a Roadiz *service* configuration."
#~ msgstr ""

# f2f82f0df2534ea899f8b953a5590230
#~ msgid ""
#~ "By default, every Roadiz environment "
#~ "read ``conf/config.yml`` configuration file. "
#~ "But you can specify different files "
#~ "for ``dev`` and ``test`` environments. "
#~ "Just create a ``conf/config_dev.yml`` or "
#~ "``conf/config_test.yml`` file to override "
#~ "default parameters. You will be able "
#~ "to use a different database, mailer "
#~ "or *Solr* instance not to pollute "
#~ "your production environment."
#~ msgstr ""

# d025c3c7e9774302b2dcb442a28f76cf
#~ msgid ""
#~ "By default, Roadiz writes its logs "
#~ "to ``logs/`` folder in a file "
#~ "named after your running environment "
#~ "(eg. ``roadiz_prod.log``). But you can "
#~ "also customize *Monolog* to use three"
#~ " different handlers. Pay attention that "
#~ "using custom log handlers will disable"
#~ " default Roadiz logging (except for "
#~ "*Doctrine* one) so it could be "
#~ "better to always use *default* handler"
#~ " along a custom one."
#~ msgstr ""

# f06a6a394cdb40b384f02b0c4847adb5
#~ msgid ""
#~ "``default``: Reproduce the Roadiz default "
#~ "handler which writes to ``logs/`` folder"
#~ " in a file named after your "
#~ "running environment"
#~ msgstr ""

# e3a8640f2b3e405a92c08f32988abfc5
#~ msgid ""
#~ "Roadiz uses *Swift Mailer* to send "
#~ "emails. This awesome library is built"
#~ " to enable different kinds of mail"
#~ " transports and protocols. By default, "
#~ "Roadiz uses your PHP ``sendmail`` "
#~ "configuration but you can tell it "
#~ "to use another transport (such as "
#~ "an external SMTP server) in your "
#~ "``conf/config.yml`` file."
#~ msgstr ""

# 8186a2b168e9427fa45d1efb962ac498
#~ msgid ""
#~ "Roadiz use `Image Intervention "
#~ "<http://image.intervention.io/>`_ library to "
#~ "automatically create a lower quality "
#~ "version of your image if they are"
#~ " too big. You can define this "
#~ "threshold value in the `assetsProcessing` "
#~ "section. `driver` and `defaultQuality` will"
#~ " be also use for the on-the-"
#~ "fly image processing with `Intervention "
#~ "Request <https://github.com/ambroisemaupate/intervention-"
#~ "request>`_ library."
#~ msgstr ""

# ef6e2ab672b34bddb542a33c74915772
#~ msgid ""
#~ "If you are developing your own "
#~ "theme, you might need to create "
#~ "some custom CLI commands. Roadiz can "
#~ "handle additional commands if you add"
#~ " them in your ``conf/config.yml`` as "
#~ "you would do for any additional "
#~ "*entities*. Make sure that every "
#~ "additional commands extend "
#~ "``Symfony\\Component\\Console\\Command\\Command`` class."
#~ msgstr ""

