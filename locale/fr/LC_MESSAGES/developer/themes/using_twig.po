# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015, Ambroise Maupate & Julien Blanchet
# This file is distributed under the same license as the Roadiz
# documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Roadiz documentation 0.14.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-11-28 13:17+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.1\n"

#: ../../developer/themes/using_twig.rst:5
msgid "Using Twig"
msgstr ""

#: ../../developer/themes/using_twig.rst:9
msgid ""
"Twig is the default rendering engine for *Roadiz* CMS. You’ll find its "
"documentation at http://twig.sensiolabs.org/doc/templates.html"
msgstr ""

#: ../../developer/themes/using_twig.rst:11
msgid ""
"When you use :ref:`Dynamic routing <dynamic-routing>` within your theme, "
"Roadiz will automatically assign some variables for you."
msgstr ""

#: ../../developer/themes/using_twig.rst:13
msgid ""
"**request** — [object] Symfony request object which contains useful data "
"such as current URI or GET parameters"
msgstr ""

#: ../../developer/themes/using_twig.rst:25
msgid "**head**"
msgstr ""

#: ../../developer/themes/using_twig.rst:15
msgid "**ajax** — [boolean] Tells if current request is an Ajax one"
msgstr ""

#: ../../developer/themes/using_twig.rst:16
msgid "**cmsVersion** — [string]"
msgstr ""

#: ../../developer/themes/using_twig.rst:17
msgid "cmsVersionNumber"
msgstr ""

#: ../../developer/themes/using_twig.rst:18
msgid "**cmsBuild** — [string]"
msgstr ""

#: ../../developer/themes/using_twig.rst:19
msgid "**devMode** — [boolean]"
msgstr ""

#: ../../developer/themes/using_twig.rst:20
msgid ""
"**baseUrl** — [string] Server base Url. Basically your domain name, port "
"and folder if you didn’t setup Roadiz at you server root"
msgstr ""

#: ../../developer/themes/using_twig.rst:21
msgid "**filesUrl** — [string]"
msgstr ""

#: ../../developer/themes/using_twig.rst:22
msgid ""
"**resourcesUrl** — [string] Your theme ``Resources`` url. Useful to reach"
" your assets."
msgstr ""

#: ../../developer/themes/using_twig.rst:23
msgid "**ajaxToken** — [string]"
msgstr ""

#: ../../developer/themes/using_twig.rst:24
msgid "**universalAnalyticsId** — [string]"
msgstr ""

#: ../../developer/themes/using_twig.rst:25
msgid "**useCdn** - [boolean]"
msgstr ""

#: ../../developer/themes/using_twig.rst:26
msgid "**fontToken** — [string]"
msgstr ""

#: ../../developer/themes/using_twig.rst:29
msgid "**session**"
msgstr ""

#: ../../developer/themes/using_twig.rst:28
msgid "**messages** — [array]"
msgstr ""

#: ../../developer/themes/using_twig.rst:29
msgid "**id** — [string]"
msgstr ""

#: ../../developer/themes/using_twig.rst:30
msgid "**user** — [object]"
msgstr ""

#: ../../developer/themes/using_twig.rst:33
msgid "**bags**"
msgstr ""

#: ../../developer/themes/using_twig.rst:32
msgid "**settings** — [SettingsBag]"
msgstr ""

#: ../../developer/themes/using_twig.rst:33
msgid "**nodeTypes** — [NodeTypesBag]"
msgstr ""

#: ../../developer/themes/using_twig.rst:34
msgid "**roles** — [RolesBag]"
msgstr ""

#: ../../developer/themes/using_twig.rst:35
msgid "**authorizationChecker** — [object]"
msgstr ""

#: ../../developer/themes/using_twig.rst:36
msgid "**tokenStorage** — [object]"
msgstr ""

#: ../../developer/themes/using_twig.rst:38
msgid "There are some more content only available from *FrontendControllers*."
msgstr ""

#: ../../developer/themes/using_twig.rst:40
msgid "**_default_locale** — [string]"
msgstr ""

#: ../../developer/themes/using_twig.rst:44
msgid "**meta**"
msgstr ""

#: ../../developer/themes/using_twig.rst:42
msgid "**siteName** — [string]"
msgstr ""

#: ../../developer/themes/using_twig.rst:43
msgid "**siteCopyright** — [string]"
msgstr ""

#: ../../developer/themes/using_twig.rst:44
msgid "**siteDescription** — [string]"
msgstr ""

#: ../../developer/themes/using_twig.rst:46
msgid ""
"Then, in each dynamic routing *actions* you will need this line "
"``$this->storeNodeAndTranslation($node, $translation);`` in order to make"
" page content available from your Twig template."
msgstr ""

#: ../../developer/themes/using_twig.rst:49
msgid "**node** — [object]"
msgstr ""

#: ../../developer/themes/using_twig.rst:50
msgid "**nodeSource** — [object]"
msgstr ""

#: ../../developer/themes/using_twig.rst:51
msgid "**translation** — [object]"
msgstr ""

#: ../../developer/themes/using_twig.rst:55
msgid "**pageMeta**"
msgstr ""

#: ../../developer/themes/using_twig.rst:53
msgid "**title** — [string]"
msgstr ""

#: ../../developer/themes/using_twig.rst:54
msgid "**description** — [string]"
msgstr ""

#: ../../developer/themes/using_twig.rst:55
msgid "**keywords** — [string]"
msgstr ""

#: ../../developer/themes/using_twig.rst:57
msgid ""
"All these data will be available in your Twig template using ``{{ }}`` "
"syntax. For example use ``{{ pageMeta.title }}`` inside your head’s "
"``<title>`` tag. You can of course call objects members within Twig using"
" the *dot* separator."
msgstr ""

#: ../../developer/themes/using_twig.rst:82
msgid "Generating paths and url"
msgstr ""

#: ../../developer/themes/using_twig.rst:84
msgid ""
"Standard Twig ``path`` and ``url`` methods are both working for *static* "
"and *dynamic* routing. In Roadiz, these methods can take either a "
"``string`` identifier or a ``NodesSources`` instance. Of course optional "
"parameters are available for both, they will automatically create an "
"*http query string* when using a node-source."
msgstr ""

#: ../../developer/themes/using_twig.rst:109
msgid "Handling node-sources with Twig"
msgstr ""

#: ../../developer/themes/using_twig.rst:111
msgid ""
"Most of yout front-end work will consist in editing *Twig* templating, "
"*Twig* assignations and… *Twig* filters. Roadiz core entities are already"
" linked together so you don’t have to prepare your data before rendering "
"it. Basically, you can access *nodes* or *node-sources* data directly in "
"*Twig* using the “dot” seperator."
msgstr ""

#: ../../developer/themes/using_twig.rst:113
msgid ""
"There is even some magic about *Twig* when accessing private or protected"
" fields: just write the fieldname and it will use the getter method "
"instead: ``{{ nodeSource.content|markdown }}`` will be interpreted as "
"``{{ nodeSource.getContent|markdown }}`` by *Twig*."
msgstr ""

#: ../../developer/themes/using_twig.rst:117
msgid ""
"Roadiz will transform your node-type fields names to *camel-case* to "
"create getters and setters into you NS class. So if you created a "
"``header_image`` field, getter will be named ``getHeaderImage()``. "
"However, if you called it ``headerimage``, getter will be "
"``getHeaderimage()``"
msgstr ""

#: ../../developer/themes/using_twig.rst:121
msgid ""
"You can access methods too! You will certainly need to get node-sources’ "
"documents to display them. Instead of declaring each document in your PHP"
" controller before, you can directly use them in *Twig*:"
msgstr ""

#: ../../developer/themes/using_twig.rst:136
msgid "Loop over node-source children"
msgstr ""

#: ../../developer/themes/using_twig.rst:138
msgid ""
"With Roadiz you will be able to grab each node-source children using "
"custom ``children`` Twig filter."
msgstr ""

#: ../../developer/themes/using_twig.rst:150
msgid ""
"`getChildren method "
"<http://api.roadiz.io/RZ/Roadiz/Core/Handlers/NodesSourcesHandler.html#method_getChildren>`_"
" must be called with a valid ``AuthorizationChecker`` instance if you "
"**don’t want anonymous visitors to see unpublished contents**. Its first "
"parameters can be set to filter over children and override default "
"ordering. If your are using ``|children`` filter, *authorization-checker*"
" is automatically passed to ``getChildren`` method."
msgstr ""

#: ../../developer/themes/using_twig.rst:164
msgid ""
"Calling ``getChildren()`` from a node-source *handler* or ``|children`` "
"filter will **always** return ``NodesSources`` objects from the same "
"translation as their parent."
msgstr ""

#: ../../developer/themes/using_twig.rst:168
msgid "Add previous and next links"
msgstr ""

#: ../../developer/themes/using_twig.rst:170
msgid ""
"In this example, we want to create links to jump to *next* and *previous*"
" pages. We will use node-source handler methods ``getPrevious()`` and "
"``getNext()`` which work the same as ``getChildren()`` method. "
"``|previous`` and ``|next`` Twig filters are also available."
msgstr ""

#: ../../developer/themes/using_twig.rst:191
msgid ""
"Calling ``getPrevious`` and ``getNext`` from a node-source *handler* will"
" **always** return ``NodesSources`` objects from the same translation as "
"their sibling."
msgstr ""

#: ../../developer/themes/using_twig.rst:195
msgid "Additional filters"
msgstr ""

#: ../../developer/themes/using_twig.rst:197
msgid "Roadiz’s Twig environment implements some useful filters, such as:"
msgstr ""

#: ../../developer/themes/using_twig.rst:199
msgid "``markdown``: Convert a markdown text to HTML"
msgstr ""

#: ../../developer/themes/using_twig.rst:200
msgid ""
"``inlineMarkdown``: Convert a markdown text to HTML without parsing "
"*block* elements (useful for just italics and bolds)"
msgstr ""

#: ../../developer/themes/using_twig.rst:201
msgid ""
"``markdownExtra``: Convert a markdown-extra text to HTML (footnotes, "
"simpler tables, abbreviations)"
msgstr ""

#: ../../developer/themes/using_twig.rst:202
msgid ""
"``centralTruncate(length, offset, ellipsis)``: Generate an ellipsis at "
"the middle of your text (useful for filenames). You can decenter the "
"ellipsis position using ``offset`` parameter, and even change your "
"ellipsis character with ``ellipsis`` parameter."
msgstr ""

#: ../../developer/themes/using_twig.rst:205
msgid "NodesSources filters"
msgstr ""

#: ../../developer/themes/using_twig.rst:207
msgid ""
"These following Twig filters will only work with ``NodesSources`` "
"entities… not ``Nodes``. Use them with the *pipe* syntax, eg. "
"``nodeSource|next``."
msgstr ""

#: ../../developer/themes/using_twig.rst:210
msgid "``children``: shortcut for ``NodesSourcesHandler::getChildren()``"
msgstr ""

#: ../../developer/themes/using_twig.rst:211
msgid "``next``: shortcut for ``NodesSourcesHandler::getNext()``"
msgstr ""

#: ../../developer/themes/using_twig.rst:212
msgid "``previous``: shortcut for ``NodesSourcesHandler::getPrevious()``"
msgstr ""

#: ../../developer/themes/using_twig.rst:213
msgid "``firstSibling``: shortcut for ``NodesSourcesHandler::getFirstSibling()``"
msgstr ""

#: ../../developer/themes/using_twig.rst:214
msgid "``lastSibling``: shortcut for ``NodesSourcesHandler::getLastSibling()``"
msgstr ""

#: ../../developer/themes/using_twig.rst:215
msgid "``parent``: shortcut for ``$source->getParent()``"
msgstr ""

#: ../../developer/themes/using_twig.rst:216
msgid ""
"``parents``: shortcut for ``NodesSourcesHandler::getParents(array "
"$options)``"
msgstr ""

#: ../../developer/themes/using_twig.rst:217
msgid "``tags``: shortcut for ``NodesSourcesHandler::getTags()``"
msgstr ""

#: ../../developer/themes/using_twig.rst:218
msgid ""
"``render(themeName)``: initiate a sub-request for rendering a given block"
" *NodesSources*"
msgstr ""

#: ../../developer/themes/using_twig.rst:221
msgid "Documents filters"
msgstr ""

#: ../../developer/themes/using_twig.rst:223
msgid ""
"These following Twig filters will only work with ``Document`` entities. "
"Use them with the *pipe* syntax, eg. ``document|display``."
msgstr ""

#: ../../developer/themes/using_twig.rst:226
msgid ""
"``url``: returns document public URL as *string*. See :ref:`document URL "
"options <display-documents>`."
msgstr ""

#: ../../developer/themes/using_twig.rst:227
msgid ""
"``display``: generates an HTML tag to display your document. See "
":ref:`document display options <display-documents>`."
msgstr ""

#: ../../developer/themes/using_twig.rst:228
msgid "``imageRatio``: return image size ratio as *float*."
msgstr ""

#: ../../developer/themes/using_twig.rst:229
msgid ""
"``imageSize``: returns image size as *array* with ``width`` and "
"``height``."
msgstr ""

#: ../../developer/themes/using_twig.rst:230
msgid ""
"``imageOrientation``: get image orientation as *string*, returns "
"``landscape`` or ``portrait``."
msgstr ""

#: ../../developer/themes/using_twig.rst:231
msgid "``path``: shortcut for document real path on server."
msgstr ""

#: ../../developer/themes/using_twig.rst:232
msgid ""
"``exists``: shortcut to test if document file exists on server. Returns "
"``boolean``."
msgstr ""

#: ../../developer/themes/using_twig.rst:235
msgid "Translations filters"
msgstr ""

#: ../../developer/themes/using_twig.rst:237
msgid ""
"These following Twig filters will only work with ``Translation`` "
"entities. Use them with the *pipe* syntax, eg. ``translation|menu``."
msgstr ""

#: ../../developer/themes/using_twig.rst:240
msgid ""
"``menu``: shortcut for "
"``TranslationViewer::getTranslationMenuAssignation()``."
msgstr ""

#: ../../developer/themes/using_twig.rst:242
msgid ""
"This filter returns some useful informations about current page available"
" languages and their urls. See `getTranslationMenuAssignation method "
"definition "
"<http://api.roadiz.io/RZ/Roadiz/Core/Viewers/TranslationViewer.html#method_getTranslationMenuAssignation>`_."
" You do not have to pass it the current request object as the filter will"
" grab it for you. But you can specify if you want *absolute* urls or not."
msgstr ""

#: ../../developer/themes/using_twig.rst:248
msgid "Standard filters and extensions are also available:"
msgstr ""

#: ../../developer/themes/using_twig.rst:250
msgid "``{{ path('myRoute') }}``: for generating static routes Url."
msgstr ""

#: ../../developer/themes/using_twig.rst:251
msgid ""
"``truncate`` and ``wordwrap`` which are parts of the `Text Extension "
"<http://twig.sensiolabs.org/doc/extensions/text.html>`_ ."
msgstr ""

#: ../../developer/themes/using_twig.rst:255
msgid "Create your own Twig filters"
msgstr ""

#: ../../developer/themes/using_twig.rst:257
msgid ""
"Imagine now that your are rendering some dynamic CSS stylesheets with "
"Twig. Your are listing your website projects which all have a distinct "
"color. So you’ve created a CSS route and a ``dynamic-colors.css.twig``."
msgstr ""

#: ../../developer/themes/using_twig.rst:269
msgid "This code should output a CSS like that:"
msgstr ""

#: ../../developer/themes/using_twig.rst:280
msgid ""
"Then you should see your “super project” title in red on your website. "
"OK, that’s great. But what should I do if I need to use a RGBA color to "
"control the Alpha channel value? For example, I want to set project color"
" to a ``<div class=\"date\">`` background like this:"
msgstr ""

#: ../../developer/themes/using_twig.rst:293
msgid ""
"*Great… I already see coming guys complaining that “rgba” is only "
"supported since IE9… We don’t give a shit!…*"
msgstr ""

#: ../../developer/themes/using_twig.rst:295
msgid ""
"Hum, hum. So you need a super filter to extract decimal values from our "
"backoffice stored hexadecimal color. Roadiz enables us to extend Twig "
"environment filters thanks to *dependency injection!*"
msgstr ""

#: ../../developer/themes/using_twig.rst:298
msgid ""
"You just have to extend ``setupDependencyInjection`` static method in "
"your main theme class. Create it if it does not exist yet."
msgstr ""

#: ../../developer/themes/using_twig.rst:346
msgid ""
"And… Voilà! You can use ``red``, ``green`` and ``blue`` filters in your "
"Twig template."
msgstr ""

#: ../../developer/themes/using_twig.rst:357
msgid "Use custom Twig extensions"
msgstr ""

#: ../../developer/themes/using_twig.rst:359
msgid ""
"Just like you did to add your own *Twig* filters, you can add your own "
"*Twig* extensions. Instead of extending ``twig.filters`` service, just "
"extend ``twig.extensions`` service."
msgstr ""

#~ msgid ""
#~ "Most of frontend work will consist "
#~ "in Twig templating and Twig "
#~ "assignations. Roadiz Core entities are "
#~ "already linked together not to prepare"
#~ " your data before rendering it. "
#~ "Basically, you can access nodes or "
#~ "nodeSources data directly in Twig using"
#~ " the “dot” seperator."
#~ msgstr ""

#~ msgid ""
#~ "There is even some magic about "
#~ "Twig when accessing private or protected"
#~ " fields: just write the fieldname and"
#~ " it will use the field getter: "
#~ "``{{ nodeSource.content|markdown }}`` will be"
#~ " interpreted as ``{{ "
#~ "nodeSource.getContent|markdown }}`` by Twig. "
#~ "It can be a time and space "
#~ "saver to just use fieldnames."
#~ msgstr ""

#~ msgid ""
#~ "Roadiz will camelize your node-type "
#~ "fields names to create getters and "
#~ "setters into you NS class. So if"
#~ " you created a ``header_image`` field, "
#~ "getter will be named ``getHeaderImage()``. "
#~ "However, if you called it "
#~ "``headerimage``, getter will be "
#~ "``getHeaderimage()``"
#~ msgstr ""

#~ msgid ""
#~ "You can access methods too! You "
#~ "will certainly need to get a "
#~ "nodeSources documents to display them. "
#~ "Instead of assigning each document in"
#~ " your PHP Controller before, you can"
#~ " directly use them in Twig:"
#~ msgstr ""

#~ msgid ""
#~ "With Roadiz you will be able to"
#~ " grab each node-source children using"
#~ " custom ``children`` Twig filter. This "
#~ "filter is a shortcut for "
#~ "``childBlock->getHandler()->getChildren(null, null, "
#~ "$authorizationChecker)``."
#~ msgstr ""

#~ msgid "``url``: shortcut for ``$source->getHandler()->getUrl()``"
#~ msgstr ""

#~ msgid "``children``: shortcut for ``$source->getHandler()->getChildren()``"
#~ msgstr ""

#~ msgid "``next``: shortcut for ``$source->getHandler()->getNext()``"
#~ msgstr ""

#~ msgid "``previous``: shortcut for ``$source->getHandler()->getPrevious()``"
#~ msgstr ""

#~ msgid ""
#~ "``firstSibling``: shortcut for "
#~ "``$source->getHandler()->getFirstSibling()``"
#~ msgstr ""

#~ msgid ""
#~ "``lastSibling``: shortcut for "
#~ "``$source->getHandler()->getLastSibling()``"
#~ msgstr ""

#~ msgid "``parent``: shortcut for ``$source->getHandler()->getParent()``"
#~ msgstr ""

#~ msgid "``parents``: shortcut for ``$source->getHandler()->getParents()``"
#~ msgstr ""

#~ msgid "``tags``: shortcut for ``$source->getHandler()->getTags()``"
#~ msgstr ""

#~ msgid ""
#~ "``url``: shortcut for "
#~ "``$document->getViewer()->getDocumentUrlByArray()``"
#~ msgstr ""

#~ msgid ""
#~ "``display``: shortcut for "
#~ "``$document->getViewer()->getDocumentByArray()``"
#~ msgstr ""

#~ msgid ""
#~ "``menu``: shortcut for "
#~ "``$translation->getViewer()->getTranslationMenuAssignation()``."
#~ msgstr ""

