# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, Ambroise Maupate & Julien Blanchet
# This file is distributed under the same license as the Roadiz documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Roadiz documentation 2.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-08-05 11:31+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../src/developer/forms/contact_forms.rst:5
msgid "Building contact forms"
msgstr ""

#: ../../src/developer/forms/contact_forms.rst:7
msgid "With Roadiz you can easily create simple contact forms with ``ContactFormManager`` class. Your controller has a convenient shortcut to create this manager with ``$this->createContactFormManager()`` method."
msgstr ""

#: ../../src/developer/forms/contact_forms.rst:10
msgid "If you want to add your own fields, you can use the manager’ form-builder with ``$contactFormManager->getFormBuilder();``. Then add your field using standard *Symfony* form syntax. Do not forget to use *Constraints* to handle errors."
msgstr ""

#: ../../src/developer/forms/contact_forms.rst:14
msgid "One contact-form for one action"
msgstr ""

#: ../../src/developer/forms/contact_forms.rst:16
msgid "Here is an example to create your contact form in your controller action."
msgstr ""

#: ../../src/developer/forms/contact_forms.rst:64
msgid "In this example, we used ``withDefaultFields`` method which add automatically ``email``, ``name`` and ``message`` fields with right validation constraints. This method is optional and you can add any field you want manually, just keep in mind that you should always ask for an ``email``."
msgstr ""

#: ../../src/developer/forms/contact_forms.rst:68
msgid "Then in your contact page Twig template:"
msgstr ""

#: ../../src/developer/forms/contact_forms.rst:90
msgid "Using contact-form in *block* controllers"
msgstr ""

#: ../../src/developer/forms/contact_forms.rst:92
msgid "If you want to use *contact-forms* in blocks instead of a full page, you will need to make your redirection response **bubble** through *Twig* render. The only way to stop Twig is to **throw an exception** and to pass your Redirect or Json response within your Exception."
msgstr ""

#: ../../src/developer/forms/contact_forms.rst:97
msgid "Roadiz makes this possible with ``RZ\\Roadiz\\CoreBundle\\Exception\\ForceResponseException``. For example, in a ``App/Controllers/ContactBlockController``, instead of returning the ``contactFormManager`` response, you will have to throw a ``ForceResponseException`` with it as an argument."
msgstr ""

#: ../../src/developer/forms/contact_forms.rst:123
msgid "Then, in your *master* controller (i.e. ``PageController``), ``render`` method will automatically catch your *ForceResponseException* exception in order to extract the forced response object. Then it will return your response instead of your page twig rendered output."
msgstr ""

#: ../../src/developer/forms/contact_forms.rst:128
msgid "Alter email configuration after form submit"
msgstr ""

#: ../../src/developer/forms/contact_forms.rst:130
msgid "If you want to customize emails sent with form data, you can use Symfony form events to change the contact form manager options: The following example alters the email subject to add the user email and makes the subject unique for the receiver."
msgstr ""

#: ../../src/developer/forms/contact_forms.rst:140
msgid "You can also use this behaviour to change dynamically the contact form receiver after the user chose it in a select box input."
msgstr ""

#: ../../src/developer/forms/contact_forms.rst:144
msgid "You can read more about form events at https://symfony.com/doc/current/form/events.html"
msgstr ""

#: ../../src/developer/forms/contact_forms.rst:147
msgid "Securing your form with *Google reCAPTCHA*"
msgstr ""

#: ../../src/developer/forms/contact_forms.rst:149
msgid "Roadiz can seamlessly use *Google reCAPTCHA* to secure your contact form against robots. All you need to do is to register on https://www.google.com/recaptcha/ to ask for a *sitekey* and a *secret*. Once you’ve got these two keys, add them to your Roadiz settings."
msgstr ""

#: ../../src/developer/forms/contact_forms.rst:156
msgid "Then, just use ``withGoogleRecaptcha()`` method on your contact-form manager."
msgstr ""

#: ../../src/developer/forms/contact_forms.rst:165
msgid "Do not forget to add recaptcha form-template and to embed google’s javascript."
msgstr ""

#: ../../src/developer/forms/contact_forms.rst:182
msgid "Backend logic with Google Recaptcha is compatible with v2 **and** v3. You’ll need to adapt your frontend logic."
msgstr ""

#: ../../src/developer/forms/contact_forms.rst:186
msgid "Sending contact form and accept application/json"
msgstr ""

#: ../../src/developer/forms/contact_forms.rst:188
msgid "If you want to send your contact form using `window.fetch` and `window.FormData`, Roadiz will still generate an html-based `Response` or `RedirectResponse`. You need to add `Accept: application/json` header to your request so that Roadiz will respond as JSON. Roadiz `JsonResponse` will contain *success* message or *error* messages for each wrong fields."
msgstr ""
