# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, Ambroise Maupate & Julien Blanchet
# This file is distributed under the same license as the Roadiz documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Roadiz documentation 2.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-08-05 11:31+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../src/developer/first-steps/manual_config.rst:4
msgid "Manual configuration"
msgstr ""

#: ../../src/developer/first-steps/manual_config.rst:6
msgid "Roadiz is a full-stack Symfony application. It follows its configuration scheme as described in https://symfony.com/doc/5.4/configuration.html"
msgstr ""

#: ../../src/developer/first-steps/manual_config.rst:10
msgid "Choose your inheritance model"
msgstr ""

#: ../../src/developer/first-steps/manual_config.rst:12
msgid "*Roadiz* main feature is all about its polymorphic document model which is mapped on a relational database. This requires a challenging structure which can be lead to some performance bottlenecks when dealing with more than 20-30 node-types. So we made the data inheritance model configurable to allow switching to `single_table <https://www.doctrine-project.org/projects/doctrine-orm/en/2.7/reference/inheritance-mapping.html#single-table-inheritance>`_ scheme which will be more performant if you need lots of node-types. However *Single class* model will drop support for fields with the *same name but not the same type* because all node-type fields will be created in the **same SQL table**."
msgstr ""

#: ../../src/developer/first-steps/manual_config.rst:18
msgid "If you really need to mix field types, we advise you to keep the original `joined table <https://www.doctrine-project.org/projects/doctrine-orm/en/2.7/reference/inheritance-mapping.html#class-table-inheritance>`_ inheritance type which creates a dedicated SQL table for each node-type. *Joined table* inheritance can be very useful with a small number of node-type (max. 20) and very different fields. But its main drawback is that Roadiz needs to *LEFT JOIN* every node-type table for each node-source query, **unless you specify one node-type criteria**."
msgstr ""

#: ../../src/developer/first-steps/manual_config.rst:22
msgid "You can configure *Doctrine* strategy for NodesSources inheritance classes in ``config/packages/roadiz_core.yaml``:"
msgstr ""

#: ../../src/developer/first-steps/manual_config.rst:32
msgid "Joined class inheritance: ``joined``"
msgstr ""

#: ../../src/developer/first-steps/manual_config.rst:33
msgid "Single table inheritance: ``single_table``"
msgstr ""

#: ../../src/developer/first-steps/manual_config.rst:37
msgid "If you change this setting after creating content in your website, all node-sources data will be lost."
msgstr ""

#: ../../src/developer/first-steps/manual_config.rst:40
msgid "Themes (compatibility with v1.x)"
msgstr ""

#: ../../src/developer/first-steps/manual_config.rst:42
msgid "Themes are statically registered into Roadiz configuration for better performances and delaying database usage. You have to register any front-end theme in your ``config/packages/roadiz_compat.yaml`` file. Theme priority is not handled here but in each of your themes by overriding static ``$priority`` value;"
msgstr ""

#: ../../src/developer/first-steps/manual_config.rst:60
msgid "You can define hostname specific themes and add a route-prefix for your routing. Defaults values are ``'*'`` for the *hostname* and ``''`` (empty string) for the route-prefix."
msgstr ""

#: ../../src/developer/first-steps/manual_config.rst:65
msgid "No theme configuration will lead into a 404 error on your website home page. But you will still have access to the back-office which is now hard-registered into Roadiz configuration."
msgstr ""

#: ../../src/developer/first-steps/manual_config.rst:71
msgid "Solr endpoint"
msgstr ""

#: ../../src/developer/first-steps/manual_config.rst:73
msgid "Roadiz can use an *Apache Solr* search-engine to index nodes-sources. Add this to your `config/packages/roadiz_core.yaml` to link your CMS to your *Solr* server:"
msgstr ""

#: ../../src/developer/first-steps/manual_config.rst:91
msgid "Roadiz CLI command can easily handle Solr index. Just type ``./bin/console solr:check`` to get more information."
msgstr ""

#: ../../src/developer/first-steps/manual_config.rst:95
msgid "Reverse proxy cache invalidation"
msgstr ""

#: ../../src/developer/first-steps/manual_config.rst:97
msgid "Roadiz can request cache invalidation to external and internal cache proxies such as internal *Symfony* AppCache or a *Varnish* instance. If configured, Roadiz will create a ``BAN`` request to each configured proxy **when user clears back-office caches**, and it will create a ``PURGE`` request **on each node-source** *update event* using first reachable node-source URL."
msgstr ""

#: ../../src/developer/first-steps/manual_config.rst:114
msgid "Make sure you `configured your external reverse proxy <https://github.com/roadiz/roadiz/blob/develop/samples/varnish_default.vcl>`_ in order to receive and handle ``BAN`` and ``PURGE`` HTTP requests."
msgstr ""

#: ../../src/developer/first-steps/manual_config.rst:119
msgid "Cloudflare proxy cache"
msgstr ""

#: ../../src/developer/first-steps/manual_config.rst:121
msgid "If you are using Cloudflare as a reverse proxy cache, you can configure Roadiz to send requests to Cloudflare to purge all items or files (when editing a node-source). You need to gather following information:"
msgstr ""

#: ../../src/developer/first-steps/manual_config.rst:124
msgid "Cloudflare zone identifier"
msgstr ""

#: ../../src/developer/first-steps/manual_config.rst:125
msgid "Cloudflare API credentials (Bearer token or email + auth-key)"
msgstr ""

#: ../../src/developer/first-steps/manual_config.rst:127
msgid "Then you can configure Roadiz with Bearer token:"
msgstr ""

#: ../../src/developer/first-steps/manual_config.rst:139
msgid "Or with your Email and AuthKey:"
msgstr ""

#: ../../src/developer/first-steps/manual_config.rst:154
msgid "Roadiz uses *Purge all files* and *Purge Files by URL* entry points: https://api.cloudflare.com/#zone-purge-all-files which are available on all Cloudflare plans."
msgstr ""

#: ../../src/developer/first-steps/manual_config.rst:158
msgid "Entities paths"
msgstr ""

#: ../../src/developer/first-steps/manual_config.rst:160
msgid "Roadiz uses *Doctrine* to map object entities to database tables."
msgstr ""

#: ../../src/developer/first-steps/manual_config.rst:195
msgid "Configure mailer"
msgstr ""

#: ../../src/developer/first-steps/manual_config.rst:197
msgid "Roadiz uses *Symfony Mailer* to send emails."
msgstr ""

#: ../../src/developer/first-steps/manual_config.rst:199
msgid "https://symfony.com/doc/5.4/mailer.html#transport-setup"
msgstr ""

#: ../../src/developer/first-steps/manual_config.rst:202
msgid "Pay attention that many external SMTP services (*Mandrill*, *Mailjet*…) only accept email from validated domains. So make sure that your application uses a known ``From:`` email sender not to be blacklisted or blocked by these services. If you need your emails to be replied to an anonymous address, use ``ReplyTo:`` header instead."
msgstr ""

#: ../../src/developer/first-steps/manual_config.rst:208
msgid "Images processing"
msgstr ""

#: ../../src/developer/first-steps/manual_config.rst:210
msgid "Roadiz use `Intervention Request Bundle <https://github.com/rezozero/intervention-request-bundle>`_ to automatically create a lower quality version of your image if they are too big and offer on-the-fly image resizing and optimizing."
msgstr ""

#: ../../src/developer/first-steps/manual_config.rst:233
msgid "Additional *Intervention Request* subscribers"
msgstr ""

#: ../../src/developer/first-steps/manual_config.rst:235
msgid "Any *Intervention Request* subscriber can be added to configuration with its ``classname`` and its constructor arguments. Here is an example with ``WatermarkListener`` which will print some text on all your images."
msgstr ""

#: ../../src/developer/first-steps/manual_config.rst:252
msgid "Use kraken.io to reduce drastically image sizes"
msgstr ""

#: ../../src/developer/first-steps/manual_config.rst:254
msgid "Since you can add *Intervention Request* subscribers, we created a useful one that sends every images to `kraken.io <https://kraken.io/>`_ services to shrink them. Once you’ve configured it, do not forget to empty your caches **and** image caches to see changes."
msgstr ""

#: ../../src/developer/first-steps/manual_config.rst:271
msgid "Take note that each generated image is sent to *kraken.io* servers. It can generate some overhead time on the first time you request an image."
msgstr ""

#: ../../src/developer/first-steps/manual_config.rst:275
msgid "Console commands"
msgstr ""

#: ../../src/developer/first-steps/manual_config.rst:277
msgid "Roadiz can be executed as a simple CLI tool using your SSH connection. This is useful to handle basic administration tasks with no need of backoffice administration."
msgstr ""

#: ../../src/developer/first-steps/manual_config.rst:284
msgid "If your system is not configured to have *php* located in ``/usr/bin/php`` use it this way:"
msgstr ""

#: ../../src/developer/first-steps/manual_config.rst:290
msgid "Default command with no arguments will show you the available commands list. Each command has its own parameters. You can use the argument ``--help`` to get more information about each tool:"
msgstr ""

#: ../../src/developer/first-steps/manual_config.rst:298
msgid "We even made *Doctrine* CLI tools directly available from Roadiz Console. Be careful, these are powerful commands which can alter your database and make you lose precious data. Especially when you will need to update your database schema after a Theme or a Core update. **Always make a database back-up before any Doctrine operation**."
msgstr ""
